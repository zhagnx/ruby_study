
        `#{get_table_struct}`
        first_row = false
        get_table_struct = "mysql -uroot -h \"127.0.0.1\" -e \"show columns from #{database}.#{table}\" | tr \"\\t\" , >  tmp/#{database}/#{table}.csv"
        sheet.add_row(['', '', row, ''].flatten)
        table.chomp!
      else
      end
      end 
      file.each_line do | table |
      if !first_row  
    CSV.foreach(table_path) do |row|
    Dir.mkdir("tmp/#{database}") 
    `#{get_tables}` 
    database.chomp!
    end
    end 
    first_row = true
    get_tables = "mysql -uroot -h \"127.0.0.1\" -e \"show tables from #{database}\" | grep -v \"Tables_in_\" > tmp/#{database}/tables"  
    open("tmp/#{database}/tables") do | file |
    sheet = package.workbook.add_worksheet(name: table_name[0..30])
    sheet.add_row(['', '', 'FILED NAME', 'TYPE', 'NULL', 'KEY', 'DEFAULT', 'EXTRA', 'DESC/VALUE'])
    sheet.add_row(['', 'DATABASE',File.basename(database), 'GAME', 'a game'])
    sheet.add_row(['', 'DESCRIPTION', '', 'DBA', ''])
    sheet.add_row(['', 'TABLE NAME', table_name,'DEVELOPER',''])
    sheet.add_row(['', 'TABLESPACE_NAME', '', 'DATE',''])
    sheet.add_row([''])
    table_name= File.basename(table_path, '.*')
  Dir["#{database}/*.csv"].each do |table_path|
  end 
  f.each_line do | database |
  package = Axlsx::Package.new
  package.serialize("#{database}.xlsx") 
# author: andy.chou
# date: 2015/02/07
# description: This script is used to pickup the database table schma into a xls format. 
#! /usr/bin/env ruby
## get the tables structure from DB
## make the dbschema xls
## mv the xlsx files to result
FileUtils.cp(Dir.glob('tmp/*.xlsx'), 'result')
FileUtils.mkdir("result") unless File.exists?("result")
FileUtils.mkdir_p("tmp")
`#{get_databases}`
databases = Dir["tmp/*development"]
databases.each do |database| 
end
get_databases = "mysql -uroot -h \"127.0.0.1\"  -e \"show databases\" | grep \"development$\" > tmp/databaslist"
open("tmp/databaslist") do | f |
require 'axlsx'
require 'csv'
